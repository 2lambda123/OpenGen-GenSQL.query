(* Queries *)

select-expr ::= select-clause
                (ws from-clause)?
                (ws where-clause)?
                ';'?

(* select-clause *)

select-clause ::= #'(?i)SELECT' ws select-list

select-list ::= star / selection (ws? ',' ws? selection)*

star ::= '*'

selection ::= '(' selection ')' | scalar-expr (ws alias-clause)?

alias-clause ::= #'(?i)AS' ws attribute-name

(* from-clause *)

from-clause ::= #'(?i)FROM' ws relation-expr

(* where-clause *)

where-clause ::= #'(?i)WHERE' ws scalar-expr

scalar-expr ::= scalar-expr-0

<scalar-expr-0> ::= scalar-expr-1 | expr-disjunction
<scalar-expr-1> ::= scalar-expr-2 | expr-conjunction
<scalar-expr-2> ::= scalar-expr-3 | expr-not
<scalar-expr-3> ::= scalar-expr-4 | expr-gt | expr-geq | expr-eq | expr-leq | expr-lt
<scalar-expr-4> ::= scalar-expr-5 | expr-addition | expr-subtraction
<scalar-expr-5> ::= scalar-expr-6 | expr-multiplication | expr-division
<scalar-expr-6> ::= scalar-expr-group | attribute-name | value

expr-disjunction ::= scalar-expr-1 (ws #'(?i)OR' ws scalar-expr-1)+

expr-conjunction ::= scalar-expr-2 (ws #'(?i)AND' ws scalar-expr-2)+

expr-not ::= #'(?i)NOT' ws scalar-expr-3

expr-gt  ::= scalar-expr-4 (ws '>'  ws scalar-expr-5)+
expr-geq ::= scalar-expr-4 (ws '>=' ws scalar-expr-5)+
expr-eq  ::= scalar-expr-4 (ws '='  ws scalar-expr-5)+
expr-leq ::= scalar-expr-4 (ws '<=' ws scalar-expr-5)+
expr-lt  ::= scalar-expr-4 (ws '<'  ws scalar-expr-5)+

expr-addition    ::= scalar-expr-5 (ws? '+' ws? scalar-expr-5)+
expr-subtraction ::= scalar-expr-5 (ws? '-' ws? scalar-expr-5)+

expr-multiplication ::= scalar-expr-6 (ws? '*' ws? scalar-expr-6)+
expr-division       ::= scalar-expr-6 (ws? '/' ws? scalar-expr-6)+

scalar-expr-group ::= '(' ws? scalar-expr ws? ')'

(* generate-expr *)

generate-expr ::= generate-clause (ws under-clause)?

generate-clause ::= #'(?i)GENERATE' ws generate-list

generate-list ::= star / simple-symbol (ws? ',' ws? simple-symbol)*

under-clause  ::= #'(?i)UNDER' ws model-expr

(* relation-expr *)

relation-expr ::= '(' ws? relation-expr ws? ')'
                | simple-symbol
                | select-expr
                | generate-expr

(* model-expr *)

model-expr ::= '(' ws? model-expr ws? ')'
             | simple-symbol

(* names *)

relation-name ::= simple-symbol

attribute-name ::= simple-symbol

(* literals *)

value         ::= float | int | bool | string
bool          ::= #'true|false'
float         ::= #'-?\d+\.\d+(E-?\d+)?'
int           ::= #'-?\d+'
nat           ::= #'\d+'
simple-symbol ::= #'(?!G__)[^0-9\s][\w\-\_\?]*'
string        ::= #'\"([^\"]+)\"'

(* whitespace *)

ws ::= #'\s+'
