(* Queries *)

select-expr ::= select-clause
                (ws from-clause)?
                (ws adding-clause)?
                (ws where-clause)?
                (ws order-by-clause)?
                (ws limit-clause)?
                ';'?

(* select-clause *)

select-clause   ::= #'(?i)SELECT' ws select-list

select-list ::= star / selection (',' ws? selection)*
star        ::= '*'
selection   ::= '(' selection ')'
              / rowid-selection
              / column-selection
              / probability-clause
              / density-clause

column-selection ::= column-expr (ws label-clause)?
rowid-selection ::= 'rowid'

label-clause ::= #'(?i)AS' ws name

(* from-clause *)

from-clause ::= #'(?i)FROM' ws table-expr
table-expr  ::= '(' table-expr ')'
              | ref
              | pseudo-column-expr
              | select-expr
              | generated-table-expr
generated-table-expr ::= generate-expr


pseudo-column-expr ::= rowid
rowid              ::= 'rowid'

(* where-clause *)

(* 'AND' has higher operator precedence than 'OR'. *)

where-clause        ::= #'(?i)WHERE' ws (or-condition / and-conditions)
<and-conditions>    ::= condition (ws #'(?i)AND' ws condition)*
condition           ::= '(' condition ')'
                      | or-condition
                      | presence-condition
                      | absence-condition
                      | equality-condition
                      | predicate-condition
and-condition       ::= '(' and-condition ')'
                      | condition ws #'(?i)AND' ws condition
or-condition        ::= '(' or-condition ')'
                      | (condition | and-condition) ws #'(?i)OR' ws (condition | and-condition)
presence-condition  ::= selection ws #'(?i)IS NOT NULL'
absence-condition   ::= selection ws #'(?i)IS NULL'
equality-condition  ::= selection ws? '=' ws? value
predicate-condition ::= selection ws? predicate-expr ws? value
predicate-expr      ::= #"<" | #">" | #"<=" | #">="

(* adding-clause *)

adding-clause ::= #'(?i)ADDING COLUMN' name

(* generate-expr *)

generate-expr ::= #'(?i)GENERATE' ws variable-list
                  (ws generate-given-clause)?
                  (ws under-clause)?

(* probability-clause *)

probability-clause ::= #'(?i)PROBABILITY'
                       (ws of-clause)
                       (ws probability-given-clause)?
                       (ws under-clause)?
                       (ws label-clause)?

density-clause ::= #'(?i)PROBABILITY DENSITY'
                   (ws of-clause)
                   (ws probability-given-clause)?
                   (ws under-clause)?
                   (ws label-clause)?

of-clause ::= #'(?i)OF' ws event-list

generate-given-clause    ::= #'(?i)GIVEN' ws binding-list
probability-given-clause ::= #'(?i)GIVEN' ws event-list

under-clause  ::= #'(?i)UNDER' ws model-expr

event-list ::= star / event-expr (',' ws event-expr)*
<event-expr> ::= binding-expr | column-expr

binding-list ::= binding-expr (',' ws binding-expr)*
binding-expr ::= column-expr ws? '=' ws? value

(* literals *)

value         ::= float | int | string
float         ::= #'-?\d+\.\d+(E-?\d+)?'
int           ::= #'-?\d+'
nat           ::= #'\d+'
string        ::= #'\"([^\"]+)\"'
simple-symbol ::= #'(?!G__)[^0-9][\w\-\_\?]*'

(* order-by-clause *)

order-by-clause ::= #'(?i)ORDER BY' ws name (ws compare-expr)?
compare-expr    ::= (ascending | descending)
ascending       ::= #'(?i)ASC'
descending      ::= #'(?i)DESC'

(* limit-clause *)

limit-clause ::= #'(?i)LIMIT' ws nat

(* literals *)

ref ::= name

model-expr ::= ref | '(' generate-expr ')'

variable-list ::= variable-expr (',' ws variable-expr)*
variable-expr ::= name

column-expr ::= name

name ::= simple-symbol | '"' simple-symbol '"'

(* whitespace *)

ws ::= #'\s+'
