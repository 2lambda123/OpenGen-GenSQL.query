(* Queries *)

query-expr ::= select-expr | with-expr

select-expr ::= select-clause
                (ws from-clause)?
                (ws where-clause)?
                (ws order-by-clause)?
                (ws limit-clause)?
                ';'?

(* select-clause *)

select-clause   ::= #'(?i)SELECT' ws select-list

select-list ::= star / selection (ws? ',' ws? selection)*
star        ::= '*'
selection   ::= '(' ws? selection ws? ')'
              / rowid-selection
              / column-selection
              / probability-clause
              / density-clause

column-selection ::= column-expr (ws label-clause)?
rowid-selection ::= 'rowid'

label-clause ::= #'(?i)AS' ws name

(* from-clause *)

from-clause ::= #'(?i)FROM' ws table-expr

(* table expressions *)

table-expr  ::= '(' ws? table-expr ws? ')'
              | ref
              | pseudo-column-expr
              | select-expr
              | generated-table-expr
              | alter-expr
              | insert-expr
              | update-expr

generated-table-expr ::= generate-expr

alter-expr ::= #'(?i)ALTER' ws table-expr ws #'(?i)ADD' ws column-expr

insert-expr          ::= #'(?i)INSERT'
                         ws insert-into-clause
                         ws values-clause
insert-into-clause   ::= #'(?i)INTO' ws table-expr
values-clause ::= #'(?i)VALUES' ws map-list
map-list      ::= '(' ws? map-expr ws? ')' (ws? ',' ws? '(' map-expr ')')*

update-expr ::= #'(?i)UPDATE' ws table-expr
                ws set-clause
                (ws where-clause)?
set-clause ::= #'(?i)SET' ws map-expr

pseudo-column-expr ::= 'rowid'

(* where-clause *)

(* 'AND' has higher operator precedence than 'OR'. *)

where-clause        ::= #'(?i)WHERE' ws (or-condition / and-conditions)
<and-conditions>    ::= condition (ws #'(?i)AND' ws condition)*
condition           ::= '(' ws? condition ws? ')'
                      | or-condition
                      | presence-condition
                      | absence-condition
                      | equality-condition
                      | predicate-condition
and-condition       ::= '(' ws? and-condition ws? ')'
                      | condition ws #'(?i)AND' ws condition
or-condition        ::= '(' ws? or-condition ws? ')'
                      | (condition | and-condition) ws #'(?i)OR' ws (condition | and-condition)
presence-condition  ::= selection ws #'(?i)IS NOT NULL'
absence-condition   ::= selection ws #'(?i)IS NULL'
equality-condition  ::= selection ws? '=' ws? value
predicate-condition ::= selection ws? predicate-expr ws? value
predicate-expr      ::= #"<" | #">" | #"<=" | #">="

(* generate-expr *)

generate-expr ::= #'(?i)GENERATE'
                  (ws generate-variables-clause)
                  (ws generate-given-clause)?
                  (ws under-clause)?

generate-variables-clause ::= star / variable-list

(* incorporate-expr *)

incorporate-expr        ::= #'(?i)INCORPORATE'
                            ws row-or-column-clause
                            ws incorporate-into-clause
row-or-column-clause    ::= row-clause | column-clause
row-clause              ::= #'(?i)ROW' ws map-expr
column-clause           ::= #'(?i)COLUMN' ws map-expr ws label-clause
incorporate-into-clause ::= #'(?i)INTO' ws model-expr

(* conditioned-by-expr *)

conditioned-by-expr ::= model-expr ws #'(?i)CONDITIONED BY' ws conditioning-event-expr

conditioning-event-expr ::= '(' ws? conditioning-event-expr ws? ')'
                          | conditioning-conjunction-expr
                          | equivalence-relation-expr
                          | env-event-expr

conditioning-conjunction-expr ::= conditioning-event-expr (ws #'(?i)AND' ws conditioning-event-expr)+

equivalence-relation-expr ::= variable-expr ws? '=' ws? (value / ref)

env-event-expr ::= nilable-ref

(* probability-clause *)

probability-clause ::= #'(?i)PROBABILITY'
                       (ws of-clause)
                       (ws probability-given-clause)?
                       (ws under-clause)?
                       (ws label-clause)?

density-clause ::= #'(?i)PROBABILITY DENSITY'
                   (ws of-clause)
                   (ws probability-given-clause)?
                   (ws under-clause)?
                   (ws label-clause)?

of-clause ::= #'(?i)OF' ws event-list

generate-given-clause    ::= #'(?i)GIVEN' ws map-expr
probability-given-clause ::= #'(?i)GIVEN' ws event-list

under-clause  ::= #'(?i)UNDER' ws model-expr

event-list ::= star / event-expr (ws? ',' ws? event-expr)* (* like map-expr, but allows column events *)
<event-expr> ::= map-entry-expr | column-expr

(* literals *)

value         ::= float | int | bool | string
float         ::= #'-?\d+\.\d+(E-?\d+)?'
int           ::= #'-?\d+'
nat           ::= #'\d+'
bool          ::= #'true|false'
string        ::= #'\"([^\"]+)\"'
simple-symbol ::= #'(?!G__)[^0-9\s][\w\-\_\?]*'

key            ::= rowid | column-expr
map-expr       ::= '(' ws? map-expr ws? ')'
                 | map-entry-expr (ws? ',' ws? map-entry-expr)*
map-entry-expr ::= key ws? '=' ws? value

(* order-by-clause *)

order-by-clause ::= #'(?i)ORDER BY' ws name (ws compare-expr)?
compare-expr    ::= (ascending | descending)
ascending       ::= #'(?i)ASC'
descending      ::= #'(?i)DESC'

(* limit-clause *)

limit-clause ::= #'(?i)LIMIT' ws nat


(* with-expr *)

with-expr ::= #'(?i)WITH' ws with-map-expr ws? ':' ws? with-sub-expr
with-map-expr ::= with-map-entry-expr (ws? ',' ws? with-map-entry-expr)*
with-map-entry-expr ::= with-map-value-expr ws #'(?i)AS' ws name
with-map-value-expr ::= '(' ws? with-map-value-expr ws? ')'
                      | table-expr
                      | model-expr
                      | value
with-sub-expr ::= query-expr


(* literals *)

ref ::= nilable-ref
nilable-ref ::= name ('.' name)*

model-expr ::= '(' ws? model-expr ws? ')'
             | ref
             | generate-expr
             | incorporate-expr
             | conditioned-by-expr

variable-list ::= variable-expr (',' ws? variable-expr)*
variable-expr ::= name

column-expr ::= name
rowid ::= nat

name ::= simple-symbol | '"' simple-symbol '"'

(* whitespace *)

ws ::= #'\s+'
