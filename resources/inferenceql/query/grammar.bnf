(* Queries *)

query ::= (relation-expr | with-expr) ';'?

relation-expr ::= '(' ws? relation-expr ws? ')'
                | simple-symbol
                | select-expr
                | generate-expr
                | insert-expr
                | relation-value
                | update-expr
                | alter-expr

(* with-expr *)

with-expr ::= #'(?i)WITH' ws binding (ws? ',' ws? binding)* ws? ':' ws? relation-expr
binding ::= expr ws alias-clause
<expr> ::= relation-expr | model-expr | scalar-expr

(* select *)

select-expr ::= select-clause
                ws from-clause
                (ws where-clause)?
                (ws group-by-clause)?
                (ws order-by-clause)?
                (ws distinct-clause)?
                (ws limit-clause)?

distinct-clause ::= #'(?i)DISTINCT'

select-clause ::= #'(?i)SELECT' (ws distinct-clause)? ws select-list

select-list ::= star
              / selection (ws? ',' ws? selection)*
              / aggregation (ws? ',' ws? aggregation)*

star ::= '*'

selection ::= selection-0 (ws alias-clause)?
<selection-0> ::= selection-1 | scalar-expr | aggregation
<selection-1> ::= selection-group

selection-group ::= '(' ws? selection-0 ws? ')'

alias-clause ::= #'(?i)AS' ws simple-symbol

from-clause ::= #'(?i)FROM' ws relation-expr

where-clause ::= #'(?i)WHERE' ws scalar-expr

group-by-clause ::= #'(?i)GROUP' ws #'(?i)BY' ws simple-symbol (ws? "," ws? simple-symbol)*

order-by-clause ::= #'(?i)ORDER' ws #'(?i)BY' ws simple-symbol (ws (asc | desc))?

asc  ::= #'(?i)ASC'
desc ::= #'(?i)DESC'

limit-clause ::= #'(?i)LIMIT' ws int

(* aggregation *)

aggregation ::= aggregation-fn ws? '(' (distinct-clause ws)? ws? (star / simple-symbol) ws? ')' (ws alias-clause)?
aggregation-fn ::= count | avg | median | std | max | min

count  ::= #'(?i)COUNT'
avg    ::= #'(?i)AVG'
std    ::= #'(?i)STD'
median ::= #'(?i)MEDIAN'
max    ::= #'(?i)MAX'
min    ::= #'(?i)MIN'

(* scalar-expr *)

scalar-expr ::= scalar-expr-0

<scalar-expr-0> ::= scalar-expr-1
<scalar-expr-1> ::= scalar-expr-2 | expr-disjunction
<scalar-expr-2> ::= scalar-expr-3 | expr-conjunction
<scalar-expr-3> ::= scalar-expr-4 | expr-not
<scalar-expr-4> ::= scalar-expr-5 | expr-binop
<scalar-expr-5> ::= scalar-expr-6 | expr-addition | expr-subtraction
<scalar-expr-6> ::= scalar-expr-7 | expr-multiplication | expr-division
<scalar-expr-7> ::= scalar-expr-group | simple-symbol | value | probability-expr | density-expr

expr-disjunction ::= scalar-expr-2 (ws #'(?i)OR'  ws scalar-expr-2)+
expr-conjunction ::= scalar-expr-3 (ws #'(?i)AND' ws scalar-expr-3)+

expr-not ::= #'(?i)NOT' ws scalar-expr-4

expr-binop ::= scalar-expr-4 (ws? binop ws? scalar-expr-5)+

expr-addition    ::= scalar-expr-5 (ws? '+' ws? scalar-expr-6)+
expr-subtraction ::= scalar-expr-5 (ws? '-' ws? scalar-expr-6)+

expr-multiplication ::= scalar-expr-6 (ws? '*' ws? scalar-expr-7)+
expr-division       ::= scalar-expr-6 (ws? '/' ws? scalar-expr-7)+

scalar-expr-group ::= '(' ws? scalar-expr ws? ')'

(* insert-expr *)

insert-expr ::= #'(?i)INSERT' ws #'(?i)INTO' ws relation-expr ws relation-expr

relation-value ::= simple-symbol-list ws #'(?i)VALUES' ws value-lists

simple-symbol-list ::= '(' ws? simple-symbol (ws? ',' ws simple-symbol)* ws? ')'
value-list ::= '(' ws? value (ws? ',' ws? value)* ws? ')'
value-lists ::= value-lists-full | value-lists-sparse
value-lists-full ::= value-list (ws? ',' ws? value-list)*
value-lists-sparse ::= '...' ws? nat ws? ':' ws? value-list (ws? ',' ws? nat ws? ':' ws? value-list)* ws? '...'

(* update-expr *)

update-expr ::= #'(?i)UPDATE' ws relation-expr
                ws #'(?i)SET' ws update-settings
                (ws #'(?i)WHERE' ws scalar-expr)?
update-settings ::= update-setting (ws? ',' ws? update-setting)*
update-setting ::= simple-symbol ws? '=' ws? scalar-expr

(* alter-expr *)

alter-expr ::= #'(?i)ALTER' ws relation-expr ws #'(?i)ADD' ws simple-symbol

(* generate-expr *)

generate-expr ::= generate-clause ws #'(?i)UNDER' ws model-expr

generate-clause ::= #'(?i)GENERATE' ws generate-list

generate-list ::= star / variable (ws? ',' ws? variable)*

(* conditioning, constraining, and events *)

probability-expr ::= #'(?i)PROBABILITY' ws #'(?i)OF'
                     ws distribution-event
                     ws #'(?i)UNDER' ws model-expr

distribution-event ::= distribution-event-0

<distribution-event-0> ::= distribution-event-1 | distribution-event-or
<distribution-event-1> ::= distribution-event-2 | distribution-event-and
<distribution-event-2> ::= distribution-event-3 | distribution-event-binop
<distribution-event-3> ::= distribution-event-group

distribution-event-or  ::= distribution-event-1 (ws #'(?i)OR'  ws distribution-event-1)+
distribution-event-and ::= distribution-event-2 (ws #'(?i)AND' ws distribution-event-2)+

distribution-event-binop ::= variable ws? binop ws? scalar-expr | scalar-expr ws? binop ws? variable

distribution-event-group ::= '(' ws? distribution-event ws? ')'

constrained-by-expr ::= model-expr
                        ws #'(?i)CONSTRAINED' ws #'(?i)BY'
                        ws distribution-event

density-expr ::= #'(?i)PROBABILITY' ws #'(?i)DENSITY' ws #'(?i)OF'
                 ws density-event
                 ws #'(?i)UNDER' ws model-expr

density-event ::= density-event-0

<density-event-0> ::= density-event-1 | density-event-and
<density-event-1> ::= density-event-2 | density-event-eq
<density-event-2> ::= density-event-group

density-event-and ::= density-event-1 (ws #'(?i)AND' ws density-event-1)+

density-event-eq ::= variable ws? '=' ws? scalar-expr | scalar-expr ws? '=' ws? variable

density-event-group ::= '(' ws? density-event ws? ')'

conditioned-by-expr ::= model-expr ws #'(?i)CONDITIONED' ws #'(?i)BY' ws density-event

incorporate-expr ::= #'(?i)INCORPORATE' ws relation-expr ws #'(?i)INTO' ws model-expr

variable ::= #'(?i)VAR' ws simple-symbol

(* model-expr *)

model-expr ::= '(' ws? model-expr ws? ')'
             | conditioned-by-expr
             | constrained-by-expr
             | simple-symbol

(* binop *)

binop ::= '>' | '>=' | '=' | '<=' | '<' | is | is-not
is ::= #'(?i)IS'
is-not ::= #'(?i)IS' ws #'(?i)NOT'

(* literals *)

value         ::= float | int | bool | string | null
bool          ::= #'true|false'
float         ::= #'-?\d+\.\d+(E-?\d+)?'
int           ::= #'-?\d+'
nat           ::= #'\d+'
simple-symbol ::= #'(?!G__)[^0-9\s][\w\-\_\?\.]*'
string        ::= #'\"([^\"]+)\"'
null          ::= #'(?i)NULL'

(* whitespace *)

ws ::= #'\s+'
