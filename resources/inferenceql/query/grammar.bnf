(* Queries *)

query ::= relation-expr ';'?

relation-expr ::= '(' ws? relation-expr ws? ')'
                | simple-symbol
                | select-expr
                | generate-expr

select-expr ::= select-clause
                ws from-clause
                (ws where-clause)?
                (ws limit-clause)?

(* select-clause *)

select-clause ::= #'(?i)SELECT' ws select-list

select-list ::= star / selection (ws? ',' ws? selection)*

star ::= '*'

selection ::= '(' selection ')' | scalar-expr (ws alias-clause)?

alias-clause ::= #'(?i)AS' ws simple-symbol

from-clause ::= #'(?i)FROM' ws relation-expr

where-clause ::= #'(?i)WHERE' ws scalar-expr

limit-clause ::= #'(?i)LIMIT' ws int

(* scalar-expr *)

scalar-expr ::= scalar-expr-0

<scalar-expr-0> ::= scalar-expr-1
<scalar-expr-1> ::= scalar-expr-2 | expr-disjunction
<scalar-expr-2> ::= scalar-expr-3 | expr-conjunction
<scalar-expr-3> ::= scalar-expr-4 | expr-not
<scalar-expr-4> ::= scalar-expr-5 | expr-gt | expr-geq | expr-eq | expr-leq | expr-lt | expr-null | expr-not-null
<scalar-expr-5> ::= scalar-expr-6 | expr-addition | expr-subtraction
<scalar-expr-6> ::= scalar-expr-7 | expr-multiplication | expr-division
<scalar-expr-7> ::= scalar-expr-group | simple-symbol | value | probability-expr | density-expr

expr-disjunction ::= scalar-expr-2 (ws #'(?i)OR'  ws scalar-expr-2)+
expr-conjunction ::= scalar-expr-3 (ws #'(?i)AND' ws scalar-expr-3)+

expr-not ::= #'(?i)NOT' ws scalar-expr-4

expr-gt  ::= scalar-expr-4 (ws? '>'  ws? scalar-expr-5)+
expr-geq ::= scalar-expr-4 (ws? '>=' ws? scalar-expr-5)+
expr-eq  ::= scalar-expr-4 (ws? '='  ws? scalar-expr-5)+
expr-leq ::= scalar-expr-4 (ws? '<=' ws? scalar-expr-5)+
expr-lt  ::= scalar-expr-4 (ws? '<'  ws? scalar-expr-5)+

expr-null     ::= scalar-expr-4 ws #"(?i)IS" ws #"(?i)NULL"
expr-not-null ::= scalar-expr-4 ws #"(?i)IS" ws #"(?i)NOT" ws #"(?i)NULL"

expr-addition    ::= scalar-expr-5 (ws? '+' ws? scalar-expr-6)+
expr-subtraction ::= scalar-expr-5 (ws? '-' ws? scalar-expr-6)+

expr-multiplication ::= scalar-expr-6 (ws? '*' ws? scalar-expr-7)+
expr-division       ::= scalar-expr-6 (ws? '/' ws? scalar-expr-7)+

scalar-expr-group ::= '(' ws? scalar-expr ws? ')'

(* generate-expr *)

generate-expr ::= generate-clause (ws under-clause)?

generate-clause ::= #'(?i)GENERATE' ws generate-list

generate-list ::= star / simple-symbol (ws? ',' ws? simple-symbol)*

under-clause  ::= #'(?i)UNDER' ws model-expr

(* conditioning, constraining, and events *)

probability-expr ::= #'(?i)PROBABILITY' ws #'(?i)OF'
                     ws distribution-event
                     ws #'(?i)UNDER' ws model-expr

distribution-event ::= distribution-event-0

<distribution-event-0> ::= distribution-event-1 | distribution-event-or
<distribution-event-1> ::= distribution-event-2 | distribution-event-and
<distribution-event-2> ::= distribution-event-3 | distribution-event-gt | distribution-event-geq | distribution-event-eq | distribution-event-leq | distribution-event-lt
<distribution-event-3> ::= distribution-event-group

distribution-event-or  ::= distribution-event-1 (ws #'(?i)OR'  ws distribution-event-1)+
distribution-event-and ::= distribution-event-2 (ws #'(?i)AND' ws distribution-event-2)+

distribution-event-gt  ::= variable-expr ws? '>'  ws? scalar-expr | scalar-expr ws? '>'  ws? variable-expr
distribution-event-geq ::= variable-expr ws? '>=' ws? scalar-expr | scalar-expr ws? '>=' ws? variable-expr
distribution-event-eq  ::= variable-expr ws? '='  ws? scalar-expr | scalar-expr ws? '='  ws? variable-expr
distribution-event-leq ::= variable-expr ws? '<=' ws? scalar-expr | scalar-expr ws? '<=' ws? variable-expr
distribution-event-lt  ::= variable-expr ws? '<'  ws? scalar-expr | scalar-expr ws? '<'  ws? variable-expr

distribution-event-group ::= '(' ws? distribution-event ws? ')'

density-expr ::= #'(?i)PROBABILITY' ws #'(?i)DENSITY' ws #'(?i)OF'
                 ws density-event
                 ws #'(?i)UNDER' ws model-expr

density-event ::= density-event-0

<density-event-0> ::= density-event-1 | density-event-and
<density-event-1> ::= density-event-2 | density-event-eq
<density-event-2> ::= density-event-group

density-event-and ::= density-event-1 (ws #'(?i)AND' ws density-event-1)+

density-event-eq ::= variable-expr ws? '=' ws? scalar-expr | scalar-expr ws? '=' ws? variable-expr

density-event-group ::= '(' ws? density-event ws? ')'

conditioned-by-expr ::= model-expr
                        ws #'(?i)CONDITIONED' ws #'(?i)BY'
                        ws density-event

variable-expr ::= #'(?i)VAR' ws simple-symbol

(* model-expr *)

model-expr ::= '(' ws? model-expr ws? ')'
             | conditioned-by-expr
             | generate-expr
             | simple-symbol

(* literals *)

value            ::= float | int | bool | string
bool             ::= #'true|false'
float            ::= #'-?\d+\.\d+(E-?\d+)?'
int              ::= #'-?\d+'
nat              ::= #'\d+'
simple-symbol    ::= #'(?!G__)[^0-9\s][\w\-\_\?]*'
string           ::= #'\"([^\"]+)\"'

(* whitespace *)

ws ::= #'\s+'
