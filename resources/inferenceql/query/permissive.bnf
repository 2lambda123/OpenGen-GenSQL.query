<scalar-expr-0> ::= scalar-expr-1 | expr-disjunction | probability-expr
<scalar-expr-6> ::= scalar-expr-group | simple-symbol | value | mutual-info-expr | approx-mutual-info-expr

(* model-expr *)

model-expr ::= '(' ws? model-expr ws? ')'
             | given-expr
             | conditioned-by-expr
             | constrained-by-expr
             | simple-symbol

(* permissive event *)

<permissive-event-list> ::= density-event-list / distribution-event-list
density-event-list ::= density-event (ws? ',' ws? density-event)*
distribution-event-list ::= distribution-event (ws? ',' ws? distribution-event)*

distribution-event-binop ::= simple-symbol ws? binop ws? scalar-expr-3
                           / scalar-expr-3 ws? binop ws? simple-symbol

density-event-eq ::= simple-symbol ws? '=' ws? scalar-expr-3
                   / scalar-expr-3 ws? '=' ws? simple-symbol

(* given *)

given-expr ::= model-expr ws #'(?i)GIVEN' ws given-event-list
given-event-list ::= given-event (ws #'(?i)AND' ws given-event)*
                   / given-event (ws? ',' ws? given-event)*

<given-event> ::= density-event-eq / distribution-event-binop

(* overrides *)

probability-expr ::= #'(?i)PROBABILITY' ws #'(?i)OF'
                     ws permissive-event-list
                     ws #'(?i)UNDER' ws model-expr

(* generate-expr *)

<generate-list> ::= star / simple-symbol-list
